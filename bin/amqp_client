#!/usr/bin/env ruby
# Starts up one or more amqp observers

require 'daemons'

class WorkerPool
  def initialize(app_name, pid_dir, workers, instance)
    @app_name = app_name
    @pid_dir = pid_dir
    @worker_count = workers
    @instance = instance
  end

  def worker_count
    @instance ? 1 : @worker_count
  end

  def start!
    worker_count.times do |i|
      daemon(@instance || i)
    end
  end

  def server_name(i)
    "#{@app_name}_num#{i}"
  end

  def multiple
    @instance.nil?
  end

  # We preload our application before forking!
  def load_rails!
    puts "Loading application..."
    require_relative '../config/environment'
    # We need to disconnect before forking.
    ActiveRecord::Base.connection.disconnect!
    puts "Loaded!"
  end

  def daemon(instance)
    Daemons.run_proc(server_name(instance), multiple: multiple, dir: @pid_dir, backtrace: true, log_output: true) do
      AmqpConsumer.new(EventWarehouse::Application.config.amqp.send(:main)).run
    end
  end
end


class AmqpClient
  APP_NAME = 'event_warehouse'.freeze
  DEFAULT_WORKERS = 2
  DEFAULT_PID_DIR = './tmp/pids'.freeze

  def initialize(args)
    @action = args.first
    @workers = parse_arg(args, /\Ai(\d+)\z/, DEFAULT_WORKERS).to_i
    @instance = parse_arg(args, /\Aw(\d+)\z/)
    @pid_dir = parse_arg(args, /\Apid_dir=([a-zA-Z0-9\_\-\/\.]+)\z/, DEFAULT_PID_DIR)
  end

  def parse_arg(args, regexp, default = nil)
    arg = args.detect { |arg| regexp.match?(arg) }
    unless arg.nil?
      val = regexp.match(arg)[1]
    else
      val = nil
    end
    val || default
  end

  def worker_pool
    @wp ||= WorkerPool.new(APP_NAME, @pid_dir, worker_count, @instance)
  end

  def run
    worker_pool.load_rails! if preload_required?
    worker_pool.start!
  end

  # Only bother loading rails if necessary
  def preload_required?
    %w[start restart reload run].include?(@action)
  end

  # If we're not daemonising we limit ourselves to one worker.
  # Otherwise we end up running our various workers in series
  # which isn't really what we want.
  def worker_count
    @action == 'run' ? 1 : @workers
  end
end

AmqpClient.new(ARGV).run
